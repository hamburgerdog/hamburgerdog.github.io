---
import { getCollection } from 'astro:content';

// 获取集合中的所有条目。
// 需要集合的名称作为参数。
// 示例：检索 `src/content/blog/**`
const blogCollection = await getCollection('blog');
//	获取所有 tag
const tags = (blogCollection.flatMap((blog) => blog.data.tags.split(' ')) as string[]).filter((t) => t !== '精选');
//	获取所有 tag 并去重，分组成 { value: string, total: number } 的形式
const tagsGroup = tags.reduce((acc: { value: string; total: number }[], cur) => {
  const index = acc.findIndex((item) => item.value === cur);
  if (index === -1) {
    acc.push({ value: cur, total: 1 });
  } else {
    acc[index].total++;
  }
  return acc;
}, []);

const sortTags = tagsGroup.sort((a, b) => b.total - a.total);

//	按照日期排序所有的文章
const posts = blogCollection.sort((a, b) => new Date(b.data.date).valueOf() - new Date(a.data.date).valueOf());
const starPosts = posts.filter((p) => p.data.tags.includes('精选'));
---

<style lang="scss">
  a {
    color: var(--text-color);
  }
  .quote {
    margin-block-start: 1em;

    #quote {
      color: orangered;
      opacity: 0.7;
      font-size: 14px;
      text-decoration: underline;

      &::before {
        content: '#';
      }

      &:hover {
        opacity: 1;
      }
    }
  }

  .theme {
    margin-block-start: 2em;
    margin-block-end: 2em;
  }

  .detail {
    margin-block-start: 2em;
    margin-block-end: 2em;
  }

  .item {
    cursor: pointer;
    display: block;
    text-decoration: none;
    margin-block-end: 1em;
    transition: color 0.1s, padding-inline-start 0.3s;
    &:hover {
      color: orangered;
      padding-inline-start: 1em;
    }
    p {
      margin-block-start: 0.2em;
      margin-block-end: 0.2em;
    }

    .header {
      display: flex;
      align-items: center;
      gap: 1em;
    }

    .title {
      cursor: pointer;
      font-size: 16px;
    }

    .subtitle {
      display: inline;
      font-size: 12px;
      opacity: 0.5;
    }

    .label {
      display: flex;
      gap: 16px;
      font-size: 12px;

      .tags {
        padding: 0px 4px;
        border-radius: 2px;
        background-color: var(--highlight);
      }
    }
  }

  .tag_filter {
    color: cadetblue;
    display: flex;
    flex-wrap: wrap;
    gap: 8px;
    font-size: 14px;
  }

  .filter_item {
    cursor: pointer;
    padding: 2px 4px;
    border-radius: 2px;

    margin-block-start: 0em;
    margin-block-end: 0em;

    &.selected {
      background-color: var(--highlight);
    }

    &:hover {
      opacity: 0.8;
    }
  }

  @media (max-width: 768px) {
    .blog_list {
      padding-inline: 36px;
    }
  }
</style>

<script>
  //	每日一句的 API
  document.addEventListener('astro:page-load', async () => {
    const res = await fetch('https://v1.hitokoto.cn/');
    const data = await res.json();
    const ele = document.querySelector('#quote') as HTMLSpanElement;
    if (ele) {
      ele.innerHTML = `「${data.from}」${data.hitokoto}`;
    }
  });

  document.addEventListener('astro:page-load', async () => {
    const tags = document.querySelectorAll('.filter_item') as NodeListOf<HTMLParagraphElement>;
    const items = document.querySelectorAll('.item') as NodeListOf<HTMLDivElement>;

    //	tags 单选并执行筛选
    tags.forEach((tag) => {
      tag.addEventListener('click', () => {
        //	多选样式调整
        const isCancel = tag.classList.contains('selected');
        //	所有选中的 tag
        const selectedTags = document.querySelectorAll('.selected');
        //  除去所有选中状态
        selectedTags.forEach((tag) => {
          tag.classList.remove('selected');
        });

        //	如果没有选中任何 tag，那么所有文章都显示，否则只显示选中的 tag 的文章
        if (isCancel) {
          items.forEach((item) => {
            item.style.display = 'block';
          });
          return;
        }

        //  如果当前没有选择即不是取消选中的逻辑
        tag.classList.add('selected');
        //  获取筛选值
        const tagValue = tag.id;
        //	所有 item 就是所有文章
        items.forEach((item) => {
          //	每篇文章的 tags
          const tags = (item.getAttribute('data-tags') as string).split(' ');
          //	如果没有选中任何 tag，那么所有文章都显示，否则只显示选中的 tag 的文章
          item.style.display = tags.includes(tagValue) ? 'block' : 'none';
        });
      });
    });
  });
</script>

<section class="blog_list">
  <div class="quote">
    <h2 class="section-title">每日一句</h2>
    <span id="quote"></span>
  </div>
  <div class="theme">
    <h2 class="section-title">主题 | Filter</h2>
    <div class="tag_filter">
      {
        sortTags.map((tag) => (
          <p class="filter_item" id={tag.value}>
            #{tag.value}({tag.total})
          </p>
        ))
      }
    </div>
  </div>
  <h2 class="section-title">精选 | Star</h2>
  <div class="star_list">
    {
      starPosts.map((post) => (
        <>
          <a href={`/blog/${post.slug}`} class="item" id={post.slug} data-tags={post.data.tags}>
            <div class="header">
              <p class="title">{post.data.title}</p>
              {post.data.subtitle && <p class="subtitle">-- {post.data.subtitle}</p>}
            </div>
            <div class="label">
              <p class="date">{post.data.date}</p>
              <p class="tags">{post.data.tags.replaceAll(' ', ' | ')}</p>
            </div>
          </a>
        </>
      ))
    }
  </div>
  <div class="detail">
    <h2 class="section-title">时间线 | Timeline</h2>
    {
      posts.map((post) => (
        <>
          <a href={`/blog/${post.slug}`} class="item" id={post.slug} data-tags={post.data.tags}>
            <div class="header">
              <p class="title">{post.data.title}</p>
              {post.data.subtitle && <p class="subtitle">-- {post.data.subtitle}</p>}
            </div>
            <div class="label">
              <p class="date">{post.data.date}</p>
              <p class="tags">{post.data.tags.replaceAll(' ', ' | ')}</p>
            </div>
          </a>
        </>
      ))
    }
  </div>
</section>
