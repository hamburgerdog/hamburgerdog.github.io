---
import BlogLayout from '../../layouts/BlogLayout.astro';
import { getCollection, getEntry } from 'astro:content';

export async function getStaticPaths() {
  const blogs = await getCollection('blog');
  return blogs.map((blog) => ({ params: { title: blog.slug } }));
}

const { title } = Astro.params;

// 获取集合中的所有条目。
// 需要集合的名称作为参数。
// 示例：检索 `src/content/blog/**`

const blog = await getEntry('blog', title);

if (!blog) {
  return Astro.redirect('/blog');
}

const { Content, headings } = await blog.render();

// 获取文章数据用于分享
const articleData = {
  title: blog.data.title || blog.slug,
  date: blog.data.date || new Date().toISOString().slice(0, 10),
  slug: blog.slug,
};
---

<style>
  .toc {
    display: flex;
    flex-direction: column;
    position: fixed;
    left: 2%;
    top: 60px;
    max-width: 250px;

    height: 80vh;
    overflow-y: auto;
  }

  .toc::-webkit-scrollbar {
    width: 0;
  }

  .toc a {
    opacity: 0.4;
  }

  @media (max-width: 1250px) {
    .toc {
      max-width: 100px;
    }
  }

  @media (max-width: 1000px) {
    .toc {
      position: relative;
      left: 0;
      top: 0;
      max-width: 100%;
      height: auto;
    }
  }

  a {
    display: inline-block;
    width: fit-content;
    text-decoration-line: none;
    font-size: 0.8rem;
  }

  ul {
    padding-inline-start: 0;
  }

  ol {
    padding-left: 0;
  }

  .top {
    display: flex;
    cursor: default;
    position: fixed;
    width: 100%;
    max-width: var(--max-width);
    bottom: 2em;
    justify-content: end;
  }

  #top {
    display: none;
    cursor: pointer;
    transform: translateX(calc(100% + 8em));
  }

  .share-p {
    position: fixed;
    top: 2em;
    right: 2em;
    cursor: pointer;
    display: none;
    align-items: center;
    justify-content: center;
    font-size: 14px;
    color: var(--text-color);
    z-index: 1000;
  }

  .share-p:hover {
    color: var(--link-color);
  }

  @media (max-width: 768px) {
    .share-p {
      display: flex;
    }
  }
</style>

<style lang="scss" is:global>
  .toc .cur-slug {
    opacity: 1 !important;
    text-decoration: underline;
  }

  h1:target,
  h2:target,
  h3:target,
  h4:target,
  h5:target {
    padding-top: 54px;
  }
</style>

<script>
  document.addEventListener('astro:page-load', () => {
    const top = document.getElementById('top') as HTMLParagraphElement;
    window.addEventListener('scroll', () => {
      if (window.scrollY > 200) {
        top.style.display = 'block';
      } else {
        top.style.display = 'none';
      }
    });

    top.addEventListener('click', () => {
      window.scrollTo({
        top: 0,
        behavior: 'smooth',
      });
    });
  });
</script>

<script>
  /**
   * 处理目录高亮的逻辑
   */
  document.addEventListener('astro:page-load', () => {
    //  获取目录dom
    const tocElm = document.getElementById('toc');
    if (!tocElm || !tocElm.dataset.toc) return;

    //  获取目录数据
    const headings = JSON.parse(tocElm.dataset.toc);
    //  观测器配置
    const option = {
      threshold: 1,
    };

    /**
     * 检查是否为小屏幕
     * @returns {boolean} 是否为小屏幕
     */
    const isSmallScreen = () => {
      return window.innerWidth <= 1000;
    };

    //  观测器回调
    const callback = (entries) => {
      if (entries.length === 0) return;
      const entry = entries.find((item) => item.isIntersecting);
      if (!entry) return;
      const element = entry.target;

      //  获取目录dom
      const tagContainer = document.querySelector('#toc');
      if (!tagContainer) return;
      //  获取当前目录dom
      const curTag = tagContainer.querySelector(`a[href="#${element.id}"]`);
      if (!curTag) return;
      //  移除所有目录高亮
      tagContainer.querySelectorAll('a').forEach((a) => a.classList.remove('cur-slug'));
      //  添加当前目录高亮
      curTag.classList.add('cur-slug');

      // 只在大屏幕时执行目录自动滚动，避免小屏幕时页面跳转
      if (!isSmallScreen()) {
        curTag.scrollIntoView({ behavior: 'auto', block: 'center', inline: 'center' });
      }
    };
    //  创建观测器
    const observer = new IntersectionObserver(callback, option);
    //  注册观测器
    headings.forEach(({ slug }) => {
      const target = document.getElementById(slug);
      if (!target) return;
      observer.observe(target);
    });
  });
</script>

<script>
  // 分享功能
  document.addEventListener('astro:page-load', async () => {
    const shareBtn = document.getElementById('shareBtn') as HTMLButtonElement;
    if (!shareBtn) return;

    // 导入 toCanvas 函数
    const { renderAndDownloadPosterToCanvas } = await import('../../script/toCanvas.js');

    shareBtn.addEventListener('click', async () => {
      try {
        // 获取文章数据 - 使用服务器端传递的数据
        const articleTitle =
          shareBtn.dataset.articleTitle || document.querySelector('h1')?.textContent || 'JOSIAH｜个人博客';
        // 使用文章的实际日期，格式化为更友好的显示
        const articleDate = shareBtn.dataset.articleDate;
        const articleTime = articleDate
          ? new Date(articleDate).toLocaleDateString('zh-CN', {
              year: 'numeric',
              month: '2-digit',
              day: '2-digit',
            })
          : new Date().toLocaleDateString();

        // 显示加载状态
        shareBtn.disabled = true;

        // 生成海报
        await renderAndDownloadPosterToCanvas(articleTitle, articleTime);
      } catch (error) {
        console.error('生成分享海报失败:', error);
      }
    });
  });
</script>

<BlogLayout title={blog.slug}>
  <ul id="toc" data-toc={JSON.stringify(headings)} class="toc">
    {
      headings
        .filter((head) => head.depth < 4)
        .map((heading) => (
          <ol>
            <a href={`#${heading.slug}`} style={{ paddingLeft: `${heading.depth * 12}px` }}>
              {heading.text}
            </a>
          </ol>
        ))
    }
  </ul>
  <div class="top"><span id="top">TOP ⬆</span></div>
  <p id="shareBtn" class="share-p" title="分享文章" data-article-title={articleData.title} data-article-date={articleData.date}>
    分享
  </p>
  <Content />
</BlogLayout>
